//! Rust type bindings for the Model Context Protocol (MCP) specification.
//!
//! This crate provides strongly-typed Rust structs and enums that represent the MCP protocol,
//! automatically generated from the protocol's JSON schema specification using the `typify` crate.
//!
//! The Model Context Protocol is a JSON-RPC based protocol that enables communication between
//! LLM clients and servers, allowing them to:
//! - Exchange messages and prompts
//! - Access and monitor resources
//! - Call tools and functions
//! - Handle capabilities negotiation
//! - Manage logging and notifications
//!
//! The types in this crate are generated at build time from the schema in `spec/2024-11-05-schema.json`
//! and provide compile-time type safety when working with MCP messages.

#![allow(irrefutable_let_patterns)]

pub const LATEST_PROTOCOL_VERSION: &str = "2024-11-05";
pub const SUPPORTED_PROTOCOL_VERSIONS: &[&str] = &[LATEST_PROTOCOL_VERSION];

/// Type bindings of the MCP JSON Schema generated by the `typify` crate.
#[cfg(feature = "2024_11_05")]
mod v2024_11_05;

/// Re-export of the types module.
#[cfg(feature = "2024_11_05")]
pub use v2024_11_05::{
    JsonrpcError as JSONRPCError, JsonrpcErrorError as JSONRPCInnerError,
    JsonrpcMessage as JSONRPCMessage, JsonrpcNotification as JSONRPCNotification,
    JsonrpcNotificationParams as JSONRPCNotificationParams, JsonrpcRequest as JSONRPCRequest,
    JsonrpcRequestParams as JSONRPCRequestParams,
    JsonrpcRequestParamsMeta as JSONRPCRequestParamsMeta, JsonrpcResponse as JSONRPCResponse, *,
};
